{"version":3,"sources":["Layout.tsx","service/cronos.ts","Transaction.tsx","settings.ts","Account.tsx","Accounts.tsx","Settings/Token.tsx","Settings/Settings.tsx","AccountCROBalance.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TabPane","Tabs","Layout","location","useLocation","navigate","useNavigate","activatedKey","pathname","slice","Fragment","href","target","position","color","defaultActiveKey","onChange","key","tab","TransactionStatus","CronosService","url","web3","this","Web3","providers","HttpProvider","txHash","eth","getTransactionReceipt","receipt","status","NotOnChain","FailedOnChain","SuccessOnChain","getBlockNumber","account","getBalance","balance","BigNumber","blockHeight","contractAddress","contract","Contract","crc20abi","methods","balanceOf","call","utils","isAddress","Transaction","props","React","useState","transactionRows","setTransactionRecords","handleSearch","value","a","requestedAt","Date","cronosService","getTransactionRecord","transactionRecord","record","now","openError","toString","direction","Search","placeholder","enterButton","size","onSearch","style","width","dataSource","columns","pagination","title","dataIndex","render","toLocaleString","QuestionCircleTwoTone","fontSize","CheckCircleTwoTone","twoToneColor","CloseCircleTwoTone","row","index","rel","Panel","header","iconStyle","collapsed","src","description","notification","error","message","CRO","name","symbol","decimalPlaces","DEFAULT_SETTINGS","version","accounts","tokens","Account","time","blockNumber","lastUpdatedAt","setLastUpdatedAt","balanceRows","setBalanceRows","fetchUpdates","getBlockHeight","CROToken","tokenBalancePromises","map","token","getCRC20Balance","Promise","all","balances","rows","i","dividedBy","pow","toFormat","currencyFormat","suffix","useEffect","length","catch","err","timer","setInterval","clearInterval","extra","onClick","onRemoveFromWishList","align","fontFamily","prefix","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","Accounts","accountFilter","setAccountFilter","onAddAccountToWatchList","textAlign","checked","disabled","UserOutlined","e","reduce","includes","push","onRemoveAccountFromWishList","TokenSetting","labelCol","span","wrapperCol","initialValues","remember","onFinish","onAdd","Item","label","rules","required","defaultValue","min","type","htmlType","Settings","onAddTokenToSettings","settings","onRemoveTokenFromSettings","AccountCROBalance","currentAccountBalance","setCurrentAccountBalance","handleFinish","getBalanceAtHeight","baseBalance","CRO_TO_BASECRO_MULTIPLIER","App","useLocalStorage","setSettings","className","path","element","isValidAddress","Error","indexOf","filter","find","_","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.e8fd0944.chunk.js","sourcesContent":["import React from \"react\";\nimport { Tabs } from \"antd\";\nimport { Outlet, useLocation, useNavigate } from \"react-router-dom\";\n// @ts-ignore\nimport GitHubForkRibbon from 'react-github-fork-ribbon';\n\nconst { TabPane } = Tabs;\n\nexport default function Layout() {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const handleTabChange = (key: string) => {\n    switch (key) {\n      case \"accounts\":\n        navigate(\"/accounts\");\n        break;\n      case \"accountcrobalance\":\n        navigate(\"/accountcrobalance\");\n        break;\n      case \"transaction\":\n        navigate(\"/transaction\");\n        break;\n      case \"settings\":\n        navigate(\"/settings\");\n        break;\n    }\n  };\n\n  const activatedKey = location.pathname.slice(1);\n\n  return (\n    <React.Fragment>\n      <GitHubForkRibbon\n        href=\"https://github.com/calvinaco/cronos-webtool\"\n        target=\"_blank\"\n        position=\"right\"\n        color=\"black\"\n      >\n        Fork me on GitHub\n      </GitHubForkRibbon>\n      <h1>Cronos Web Tool</h1>\n      <Tabs defaultActiveKey={activatedKey} onChange={handleTabChange}>\n        <TabPane tab=\"Accounts Balances\" key=\"accounts\">\n          {\" \"}\n        </TabPane>\n        <TabPane tab=\"Account Historical CRO Balance\" key=\"accountcrobalance\">\n          {\" \"}\n        </TabPane>\n        <TabPane tab=\"Query Transaction Status\" key=\"transaction\">\n          {\" \"}\n        </TabPane>\n        <TabPane tab=\"Settings\" key=\"settings\"></TabPane>\n      </Tabs>\n      <Outlet />\n    </React.Fragment>\n  );\n}\n","import crc20abi from '../contractABI/crc20.json';\nimport BigNumber from 'bignumber.js';\nimport Web3 from 'web3';\nimport { TransactionReceipt } from 'web3-eth';\nexport type { TransactionReceipt } from 'web3-eth';\n\nexport enum TransactionStatus {\n    NotOnChain = 'Not on Chain',\n    SuccessOnChain = 'Success on chain',\n    FailedOnChain = 'Failed on chain',\n}\n\nexport default class CronosService {\n    private web3: Web3;\n\n    public constructor(private url: string) {\n        this.web3 = new Web3(new Web3.providers.HttpProvider(url));\n    }\n\n    public async getTransactionRecord(txHash: string): Promise<TransactionRecord> {\n        const receipt = await this.web3.eth.getTransactionReceipt(txHash)\n\n        if (receipt === null) {\n            return {\n                status: TransactionStatus.NotOnChain,\n            }\n        }\n\n        if (!receipt.status) {\n            return {\n                status: TransactionStatus.FailedOnChain,\n                receipt: receipt,\n            }\n        }\n\n        return {\n            status: TransactionStatus.SuccessOnChain,\n            receipt: receipt,\n        }\n    }\n\n    public async getBlockHeight(): Promise<number> {\n        return this.web3.eth.getBlockNumber();\n    }\n\n    public async getBalance(account: string): Promise<BigNumber> {\n        const balance = await this.web3.eth.getBalance(account);\n        return new BigNumber(balance);\n    }\n\n    public async getBalanceAtHeight(account: string, blockHeight: string): Promise<BigNumber> {\n        const balance = await this.web3.eth.getBalance(account, blockHeight);\n        return new BigNumber(balance);\n    }\n\n    public async getCRC20Balance(account: string, contractAddress: string): Promise<BigNumber> {\n        const contract = new this.web3.eth.Contract(crc20abi as any, contractAddress);\n        const balance = await contract.methods.balanceOf(account).call();\n        return new BigNumber(balance);\n    }\n\n    public isValidAddress(account: string): boolean {\n        return this.web3.utils.isAddress(account);\n    }\n}\n\nexport type TransactionRecord = {\n    status: TransactionStatus,\n    receipt?: TransactionReceipt,\n} & ({\n    status: TransactionStatus.NotOnChain\n} | {\n    status: TransactionStatus.SuccessOnChain\n    receipt: TransactionReceipt,\n} | {\n    status: TransactionStatus.FailedOnChain,\n    receipt: TransactionReceipt,\n})","import React from \"react\";\nimport { Collapse, Input, Space, Table, notification } from \"antd\";\nimport {\n  CheckCircleTwoTone,\n  CloseCircleTwoTone,\n  QuestionCircleTwoTone,\n} from \"@ant-design/icons\";\nimport ReactJson from \"react-json-view\";\nimport CronosService, {\n  TransactionStatus,\n  TransactionReceipt,\n} from \"./service/cronos\";\n\nexport default function Transaction(props: Props) {\n  const [transactionRows, setTransactionRecords] = React.useState<\n    TransactionRow[]\n  >([]);\n\n  const prependTransactionRecords = (record: TransactionRow) => {\n    setTransactionRecords([record, ...transactionRows]);\n  };\n\n  const handleSearch: AntdInputOnSearchFn = async (value) => {\n    if (value === \"\") {\n      return;\n    }\n    const requestedAt = new Date();\n    try {\n      const transactionRecord = await props.cronosService.getTransactionRecord(\n        value\n      );\n\n      prependTransactionRecords({\n        key: Date.now(),\n        txHash: value,\n        requestedAt,\n        status: transactionRecord.status,\n        receipt: transactionRecord.receipt,\n      });\n    } catch (err) {\n      openError(\"Get Transaction Error\", (err as Error).toString());\n      return;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Space direction=\"vertical\">\n        <Input.Search\n          placeholder=\"Transaction Hash\"\n          enterButton=\"Query\"\n          size=\"large\"\n          onSearch={handleSearch}\n          style={{width: 650}}\n        />\n      </Space>\n      <Table dataSource={transactionRows} columns={columns} pagination={false} />\n    </React.Fragment>\n  );\n}\n\ntype Props = {\n  cronosService: CronosService;\n};\n\ntype TransactionRow = {\n  key: number;\n  requestedAt: Date;\n  txHash: string;\n  status: TransactionStatus;\n  receipt?: TransactionReceipt;\n};\n\nconst columns = [\n  {\n    title: \"Requested At\",\n    dataIndex: \"requestedAt\",\n    key: \"requestedAt\",\n    render: (value: Date) => <span>{value.toLocaleString()}</span>,\n  },\n  {\n    title: \"Status\",\n    dataIndex: \"status\",\n    key: \"status\",\n    render: (value: TransactionStatus) => {\n      switch (value) {\n        case TransactionStatus.NotOnChain:\n          return <QuestionCircleTwoTone style={{ fontSize: 22 }} />;\n        case TransactionStatus.SuccessOnChain:\n          return (\n            <CheckCircleTwoTone\n              twoToneColor=\"#52c41a\"\n              style={{ fontSize: 22 }}\n            />\n          );\n        case TransactionStatus.FailedOnChain:\n          return (\n            <CloseCircleTwoTone\n              twoToneColor=\"#eb2f96\"\n              style={{ fontSize: 22 }}\n            />\n          );\n      }\n    },\n  },\n  {\n    title: \"Transaction Hash\",\n    dataIndex: \"txHash\",\n    key: \"txHash\",\n    render: (value: string, row: TransactionRow, index: number) => {\n      return (\n        <React.Fragment>\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href={`https://cronos.crypto.org/explorer/tx/${value}`}\n          >\n            {value}\n          </a>\n          <Collapse>\n            <Collapse.Panel header=\"Transaction Receipt\" key=\"receipt\">\n              {!!row.receipt && (\n                <ReactJson\n                  iconStyle=\"square\"\n                  collapsed={1}\n                  src={row.receipt!}\n                />\n              )}\n            </Collapse.Panel>\n          </Collapse>\n        </React.Fragment>\n      );\n    },\n  },\n];\n\ntype AntdInputOnSearchFn = (\n  value: string,\n  event?:\n    | React.ChangeEvent<HTMLInputElement>\n    | React.MouseEvent<HTMLElement>\n    | React.KeyboardEvent<HTMLInputElement>\n) => void;\n\nconst openError = (title: string, description: string) => {\n  notification.error({\n    message: title,\n    description,\n  });\n};\n","export type Settings = {\n  version: 1;\n  accounts: string[];\n  tokens: Token[];\n};\n\nexport type Token = TokenV1;\n\nexport type TokenV1 = {\n  name: string;\n  symbol: string;\n  contractAddress: string;\n  decimalPlaces: number;\n};\n\nexport const CRO: Token = {\n  name: \"CRO\",\n  symbol: \"CRO\",\n  contractAddress: \"\",\n  decimalPlaces: 18,\n};\n\nexport const DEFAULT_SETTINGS: Settings = {\n  version: 1,\n  accounts: [],\n  tokens: [\n    {\n      name: \"Dai Stablecoin\",\n      symbol: \"DAI\",\n      contractAddress: \"0xf2001b145b43032aaf5ee2884e456ccd805f677d\",\n      decimalPlaces: 18,\n    },\n    {\n      name: \"Tether USD\",\n      symbol: \"USDT\",\n      contractAddress: \"0x66e428c3f67a68878562e79A0234c1F83c208770\",\n      decimalPlaces: 6,\n    },\n    {\n      name: \"USD Coin\",\n      symbol: \"USDC\",\n      contractAddress: \"0xc21223249CA28397B4B6541dfFaEcC539BfF0c59\",\n      decimalPlaces: 6,\n    },\n    {\n      name: \"VVSToken\",\n      symbol: \"VVS\",\n      contractAddress: \"0x2D03bECE6747ADC00E1a131BBA1469C15fD11e03\",\n      decimalPlaces: 18,\n    },\n    {\n      name: \"Wrapped BTC\",\n      symbol: \"WBTC\",\n      contractAddress: \"0x062E66477Faf219F25D27dCED647BF57C3107d52\",\n      decimalPlaces: 8,\n    },\n    {\n      name: \"Wrapped ETH\",\n      symbol: \"WETH\",\n      contractAddress: \"0xe44Fd7fCb2b1581822D0c862B68222998a0c299a\",\n      decimalPlaces: 18,\n    }\n  ],\n};\n","import React from \"react\";\nimport { Button, Card, Table, notification } from \"antd\";\nimport CronosService from \"./service/cronos\";\nimport { CRO as CROToken, Token } from \"./settings\";\nimport BigNumber from \"bignumber.js\";\n\nexport default function Account(props: Props) {\n  const [lastUpdatedAt, setLastUpdatedAt] = React.useState<LastUpdatedAt>({\n    time: new Date(),\n    blockNumber: 0,\n  });\n  const [balanceRows, setBalanceRows] = React.useState<BalanceRow[]>([]);\n\n  const fetchUpdates = async () => {\n    const blockNumber = await props.cronosService.getBlockHeight();\n\n    const tokens = [CROToken, ...props.tokens];\n    const tokenBalancePromises = tokens.map((token) => {\n      if (token === CROToken) {\n        return props.cronosService.getBalance(props.account);\n      } else {\n        return props.cronosService.getCRC20Balance(\n          props.account,\n          token.contractAddress\n        );\n      }\n    });\n\n    const balances = await Promise.all(tokenBalancePromises);\n    const rows = balances.map((balance, i) => {\n      const token = tokens[i];\n      return {\n        key: token.contractAddress,\n        name: token.name,\n        balance: balance\n          .dividedBy(new BigNumber(10).pow(token.decimalPlaces))\n          .toFormat(token.decimalPlaces, {\n            ...currencyFormat,\n            suffix: ` ${token.symbol}`,\n          }),\n      };\n    });\n\n    setBalanceRows(rows);\n\n    setLastUpdatedAt({\n      time: new Date(),\n      blockNumber,\n    });\n  };\n\n  React.useEffect(() => {\n    if (balanceRows.length === 0) {\n      fetchUpdates().catch(err => {\n        openError('Fetch balance error', err.toString());\n      });\n    }\n    const timer = setInterval(() => {\n      fetchUpdates().catch(err => {\n        openError('Fetch balance error', err.toString());\n      });\n    }, 30000);\n    return () => clearInterval(timer);\n  });\n\n  return (\n    <Card title={(\n      <React.Fragment>\n      <div>\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href={`https://cronos.crypto.org/explorer/address/${props.account}`}\n        >\n          {props.account}\n        </a>\n      </div>\n      <div>\n        {lastUpdatedAt.time.toLocaleString()} at Block #{lastUpdatedAt.blockNumber}\n      </div>\n\n      </React.Fragment>\n    )} extra={(\n      <Button\n        onClick={() => props.onRemoveFromWishList()}\n      >Remove</Button>\n    )} style={{ width: 600 }}>\n      <Table dataSource={balanceRows} columns={columns} pagination={false} />\n    </Card>\n  )\n}\n\ntype Props = {\n  cronosService: CronosService;\n  onRemoveFromWishList: () => void;\n\n  account: string;\n  tokens: Token[];\n};\n\ntype LastUpdatedAt = {\n  time: Date,\n  blockNumber: number,\n}\n\ntype BalanceRow = {\n  key: string;\n  name: string;\n  balance: string;\n};\n\nconst columns = [\n  {\n    title: \"Token\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"Balance\",\n    dataIndex: \"balance\",\n    key: \"balance\",\n    align: \"right\" as const,\n    render: (value: string) => (\n      <span style={{\n        fontFamily: 'Nunito,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol'\n      }}>\n        {value}\n      </span>\n    )\n  },\n];\n\nconst currencyFormat: BigNumber.Format = {\n  prefix: '',\n  decimalSeparator: '.',\n  groupSeparator: ',',\n  groupSize: 3,\n  secondaryGroupSize: 0,\n  fractionGroupSeparator: ' ',\n  fractionGroupSize: 0,\n  suffix: ''\n}\n\nconst openError = (title: string, description: string) => {\n  notification.error({\n    message: title,\n    description,\n  });\n};","import React, { ChangeEventHandler } from \"react\";\nimport { Input, Switch, Space, notification } from \"antd\";\nimport { UserOutlined } from \"@ant-design/icons\";\nimport Account from \"./Account\";\nimport CronosService from \"./service/cronos\";\nimport { Token } from \"./settings\";\n\nexport default function Accounts(props: Props) {\n  const [accountFilter, setAccountFilter] = React.useState<string>(\"\");\n\n  const handleAddAccount = (value: string) => {\n    try {\n      props.onAddAccountToWatchList(value);\n    } catch (err) {\n      openError(\"Cannot Add Account to Watch List\", (err as any).toString());\n    }\n  };\n\n  const handleFilterAccount: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setAccountFilter(e.target.value);\n  };\n  return (\n    <React.Fragment>\n      <div>\n        <Space direction=\"vertical\">\n          <Input.Search\n            style={{ width: 500 }}\n            placeholder=\"Add Account to Watch List\"\n            enterButton=\"Add\"\n            size=\"large\"\n            onSearch={handleAddAccount}\n          />\n        </Space>\n      </div>\n      <div style={{ textAlign: \"right\" }}>\n        <Space direction=\"vertical\">\n          <div>Auto Refresh <Switch checked={true} disabled /></div>\n          <Input\n            placeholder=\"Filter Account\"\n            prefix={<UserOutlined />}\n            size=\"large\"\n            onChange={handleFilterAccount}\n          />\n        </Space>\n      </div>\n      {!!accountFilter && `Filtering by account: ${accountFilter}`}\n      {props.accounts.reduce((accounts, account) => {\n        if (!account.includes(accountFilter)) {\n          return accounts;\n        }\n        accounts.push(\n          <Space key={account}>\n            <Account\n              cronosService={props.cronosService}\n              onRemoveFromWishList={() =>\n                props.onRemoveAccountFromWishList(account)\n              }\n              account={account}\n              tokens={props.tokens}\n            />\n          </Space>\n        );\n        return accounts;\n      }, [] as any[])}\n    </React.Fragment>\n  );\n}\n\ntype Props = {\n  cronosService: CronosService;\n  onAddAccountToWatchList: (account: string) => void;\n  onRemoveAccountFromWishList: (account: string) => void;\n\n  accounts: string[];\n  tokens: Token[];\n};\n\nconst openError = (title: string, description: string) => {\n  notification.error({\n    message: title,\n    description,\n  });\n};\n","import React from \"react\";\nimport { Button, Form, Input, InputNumber, notification } from \"antd\";\nimport { Token } from \"../settings\";\n\nexport default function TokenSetting(props: Props) {\n  const disabled = props.disabled;\n\n  const handleFinish = (value: any) => {\n      try {\n        props.onAdd && props.onAdd(value);\n      } catch(err) {\n        notification.error({\n            message: 'Add Token Error',\n            description: (err as Error).toString(),\n        })\n      }\n  }\n\n  return (\n    <Form\n      name=\"basic\"\n      labelCol={{ span: 6 }}\n      wrapperCol={{ span: 18 }}\n      initialValues={{ remember: true }}\n      onFinish={handleFinish}\n    >\n      <Form.Item label=\"Token Name\" name=\"name\" rules={[{ required: true }]}>\n        <Input disabled={disabled} defaultValue={props.defaultValue?.name} />\n      </Form.Item>\n\n      <Form.Item label=\"Symbol\" name=\"symbol\" rules={[{ required: true }]}>\n        <Input disabled={disabled} defaultValue={props.defaultValue?.symbol} />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Decimal Places\"\n        name=\"decimalPlaces\"\n        rules={[{ required: true }]}\n      >\n        <InputNumber\n          min={0}\n          disabled={disabled}\n          defaultValue={props.defaultValue?.decimalPlaces}\n        />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Contract Address\"\n        name=\"contractAddress\"\n        rules={[{ required: true }]}\n      >\n        <Input\n          disabled={disabled}\n          defaultValue={props.defaultValue?.contractAddress}\n        />\n      </Form.Item>\n\n      {!disabled && (\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Add Token\n          </Button>\n        </Form.Item>\n      )}\n    </Form>\n  );\n}\n\nexport type Props = {\n  onAdd?: (value: any) => void;\n  defaultValue?: Token;\n  disabled?: boolean;\n};\n","import React from \"react\";\nimport { Button, Card, Space } from \"antd\";\nimport { Settings as SettingsType } from \"../settings\";\nimport TokenSetting from \"./Token\";\n\nexport default function Settings(props: Props) {\n  return (\n    <React.Fragment>\n      <Card title=\"Add Token\" style={{ width: 600 }}>\n        <TokenSetting onAdd={props.onAddTokenToSettings} />\n      </Card>\n      {props.settings.tokens.map((token, i) => (\n        <Space key={i} direction=\"vertical\">\n          <Card\n            title={token.name}\n            extra={\n              <Button onClick={() => props.onRemoveTokenFromSettings(i)}>\n                Remove\n              </Button>\n            }\n            style={{ width: 600 }}\n          >\n            <TokenSetting defaultValue={token} disabled />\n          </Card>\n        </Space>\n      ))}\n    </React.Fragment>\n  );\n}\n\nexport type Props = {\n  settings: SettingsType;\n  onAddTokenToSettings: (value: any) => void;\n  onRemoveTokenFromSettings: (index: number) => void;\n};\n","import React from \"react\";\nimport { Button, Card, Form, Input, InputNumber, Space, notification } from \"antd\";\nimport BigNumber from \"bignumber.js\";\nimport CronosService from \"./service/cronos\";\n\ntype CROAccountBalance = {\n  account: string,\n  blockNumber: string,\n  baseBalance: BigNumber,\n}\n\nexport default function AccountCROBalance(props: Props) {\n  const [currentAccountBalance, setCurrentAccountBalance] = React.useState<\n    CROAccountBalance\n  >();\n\n\n  const handleFinish = async (value: any) => {\n    try {\n      const baseBalance = await props.cronosService.getBalanceAtHeight(\n        value.account,\n        value.blockNumber,\n      );\n      setCurrentAccountBalance({\n        account: value.account,\n        blockNumber: value.blockNumber,\n        baseBalance,\n      });\n    } catch(err) {\n      openError(\"Get Balance Error\", (err as Error).toString());\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Space direction=\"vertical\">\n        <Form\n        name=\"basic\"\n        onFinish={handleFinish}\n        >\n          <Form.Item label=\"Account\" name=\"account\" rules={[{ required: true }]}>\n            <Input size='large' style={{width: 650}} />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Block Number\"\n            name=\"blockNumber\"\n            rules={[{ required: true }]}\n          >\n            <InputNumber\n              min={0}\n              size='large'\n              style={{width: 150}}\n            />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Query Balance\n            </Button>\n          </Form.Item>\n        </Form>\n      </Space>\n      { currentAccountBalance && (\n        <Card title={(\n          <React.Fragment>\n            <div>\n              <a\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href={`https://cronos.crypto.org/explorer/address/${currentAccountBalance.account}`}\n              >\n                {currentAccountBalance.account}\n              </a>\n            </div>\n            <div>\n              At Block #{currentAccountBalance.blockNumber}\n            </div>\n          </React.Fragment>\n        )}>\n          {currentAccountBalance.baseBalance.dividedBy(CRO_TO_BASECRO_MULTIPLIER).toFormat(18, {\n            ...currencyFormat,\n            suffix: ' CRO',\n          })}\n        </Card>\n      )}\n    </React.Fragment>\n  );\n}\n\ntype Props = {\n  cronosService: CronosService;\n};\n\nconst openError = (title: string, description: string) => {\n  notification.error({\n    message: title,\n    description,\n  });\n};\n\nconst CRO_DECIMAL_PLACES = 18;\n\nconst CRO_TO_BASECRO_MULTIPLIER = new BigNumber(10).pow(CRO_DECIMAL_PLACES);\n\nconst currencyFormat: BigNumber.Format = {\n  prefix: '',\n  decimalSeparator: '.',\n  groupSeparator: ',',\n  groupSize: 3,\n  secondaryGroupSize: 0,\n  fractionGroupSeparator: ' ',\n  fractionGroupSize: 0,\n  suffix: ''\n}","import React from 'react';\nimport { Navigate, Routes, Route } from \"react-router-dom\";\nimport { useLocalStorage } from '@rehooks/local-storage';\nimport Layout from './Layout';\nimport Transaction from './Transaction';\nimport './App.css';\nimport CronosService from './service/cronos';\nimport { DEFAULT_SETTINGS, Settings as SettingsType, Token } from './settings';\nimport Accounts from './Accounts';\nimport Settings from './Settings/Settings';\nimport AccountCROBalance from './AccountCROBalance';\n\nexport default function App() {\n  const [settings, setSettings] = useLocalStorage<SettingsType>('settings');\n\n  if (!settings) {\n    setSettings(DEFAULT_SETTINGS);\n    return <React.Fragment />;\n  }\n\n  const cronosService = new CronosService('https://evm-cronos.crypto.org');\n\n  const addAccountToWishList = (account: string) => {\n    if (!cronosService.isValidAddress(account)) {\n      throw new Error('invalid address');\n    }\n    if (settings.accounts.indexOf(account) !== -1) {\n      throw new Error('account already added');\n    }\n    setSettings({\n      ...settings,\n      accounts: [...settings!.accounts, account],\n    })\n  }\n\n  const removeAccountFromWishList = (account: string) => {\n    setSettings({\n      ...settings,\n      accounts: settings!.accounts.filter((value) => value !== account),\n    })\n  }\n\n  const addTokenToSettings = (value: Token) => {\n    if (!cronosService.isValidAddress(value.contractAddress)) {\n      throw new Error('invalid contract address');\n    }\n    if (!!settings.tokens.find(token => token.contractAddress === value.contractAddress)) {\n      throw new Error('token already added');\n    }\n    setSettings({\n      ...settings,\n      tokens: [...settings!.tokens, value]\n    })\n  }\n\n  const removeTokenAtIndexFromSettings = (index: number) => {\n    setSettings({\n      ...settings,\n      tokens: settings!.tokens.filter((_, i) => i !== index),\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route path=\"accounts\" element={<Accounts\n            cronosService={cronosService}\n            onAddAccountToWatchList={addAccountToWishList}\n            onRemoveAccountFromWishList={removeAccountFromWishList}\n            accounts={settings.accounts}\n            tokens={settings.tokens}\n          />} />\n          <Route path=\"accountcrobalance\" element={<AccountCROBalance\n            cronosService={cronosService}\n          />} />\n          <Route path=\"transaction\" element={<Transaction cronosService={cronosService} />} />\n          <Route path=\"settings\" element={<Settings\n            settings={settings}\n            onAddTokenToSettings={addTokenToSettings}\n            onRemoveTokenFromSettings={removeTokenAtIndexFromSettings}\n          />} />\n          <Route index element={<Navigate to=\"accounts\" />} / >\n        </Route>\n      </Routes>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}