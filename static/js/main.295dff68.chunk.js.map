{"version":3,"sources":["Layout.tsx","service/cronos.ts","Transaction.tsx","settings.ts","Account.tsx","Accounts.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TabPane","Tabs","Layout","location","useLocation","navigate","useNavigate","activatedKey","pathname","slice","Fragment","defaultActiveKey","onChange","key","tab","TransactionStatus","CronosService","url","web3","this","Web3","providers","HttpProvider","txHash","eth","getTransactionReceipt","receipt","status","NotOnChain","FailedOnChain","SuccessOnChain","account","getBalance","balance","BigNumber","contractAddress","contract","Contract","crc20abi","methods","balanceOf","call","utils","isAddress","Transaction","props","React","useState","transactionRows","setTransactionRecords","handleSearch","value","a","requestedAt","Date","cronosService","getTransactionRecord","transactionRecord","record","now","openError","toString","direction","Search","placeholder","enterButton","size","onSearch","style","width","dataSource","columns","pagination","title","dataIndex","render","toLocaleString","QuestionCircleTwoTone","fontSize","CheckCircleTwoTone","twoToneColor","CloseCircleTwoTone","row","index","target","rel","href","Panel","header","iconStyle","collapsed","src","description","notification","error","message","CRO","name","symbol","decimalPlaces","DEFAULT_SETTINGS","version","accounts","tokens","Account","balanceRows","setBalanceRows","fetchBalances","CROToken","tokenBalancePromises","map","token","getCRC20Balance","Promise","all","balances","rows","i","dividedBy","pow","toFormat","currencyFormat","suffix","useEffect","length","extra","onClick","onRemoveFromWishList","align","fontFamily","prefix","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","Accounts","accountFilter","setAccountFilter","onAddAccountToWatchList","err","textAlign","UserOutlined","e","reduce","includes","push","onRemoveAccountFromWishList","App","useLocalStorage","settings","setSettings","className","path","element","isValidAddress","Error","indexOf","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2uFAIQA,EAAYC,IAAZD,QAEO,SAASE,IACpB,IAAMC,EAAWC,cACXC,EAAWC,cAgBXC,EAAeJ,EAASK,SAASC,MAAM,GAE7C,OACI,eAAC,IAAMC,SAAP,WACI,eAAC,IAAD,CAAMC,iBAAkBJ,EAAcK,SAlBtB,SAACC,GACrB,OAAQA,GACJ,IAAK,WACDR,EAAS,aACT,MACJ,IAAK,cACDA,EAAS,gBACT,MACJ,IAAK,WACDA,EAAS,eASb,UACI,cAACL,EAAD,CAASc,IAAI,oBAAb,cAAqC,YACrC,cAACd,EAAD,CAASc,IAAI,2BAAb,cAA4C,kBAGhD,cAAC,IAAD,O,IC3BAC,E,0LAAAA,K,0BAAAA,E,kCAAAA,E,iCAAAA,M,SAMSC,E,WAGjB,WAA2BC,GAAc,yBAAdA,MAAa,KAFhCC,UAEgC,EACpCC,KAAKD,KAAO,IAAIE,IAAK,IAAIA,IAAKC,UAAUC,aAAaL,I,+FAGzD,WAAkCM,GAAlC,uFAC0BJ,KAAKD,KAAKM,IAAIC,sBAAsBF,GAD9D,UAGoB,QAFVG,EADV,iDAIe,CACHC,OAAQZ,EAAkBa,aALtC,UASSF,EAAQC,OATjB,yCAUe,CACHA,OAAQZ,EAAkBc,cAC1BH,QAASA,IAZrB,gCAgBW,CACHC,OAAQZ,EAAkBe,eAC1BJ,QAASA,IAlBjB,gD,sHAsBA,WAAwBK,GAAxB,uFAC0BZ,KAAKD,KAAKM,IAAIQ,WAAWD,GADnD,cACUE,EADV,yBAEW,IAAIC,IAAUD,IAFzB,gD,2HAKA,WAA6BF,EAAiBI,GAA9C,gFACUC,EAAW,IAAIjB,KAAKD,KAAKM,IAAIa,SAASC,EAAiBH,GADjE,SAE0BC,EAASG,QAAQC,UAAUT,GAASU,OAF9D,cAEUR,EAFV,yBAGW,IAAIC,IAAUD,IAHzB,gD,qFAMA,SAAsBF,GAClB,OAAOZ,KAAKD,KAAKwB,MAAMC,UAAUZ,O,KCxC1B,SAASa,EAAYC,GAAe,IAAD,EACCC,IAAMC,SAErD,IAH8C,mBACzCC,EADyC,KACxBC,EADwB,KAS1CC,EAAiC,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,yDAC1B,KAAVD,EADoC,wDAIlCE,EAAc,IAAIC,KAJgB,kBAMNT,EAAMU,cAAcC,qBAClDL,GAPoC,OAMhCM,EANgC,OAJPC,EAcL,CACxB7C,IAAKyC,KAAKK,MACVpC,OAAQ4B,EACRE,cACA1B,OAAQ8B,EAAkB9B,OAC1BD,QAAS+B,EAAkB/B,SAlB/BuB,EAAsB,CAACS,GAAF,mBAAaV,KAGM,yDAkBtCY,EAAU,wBAAyB,KAAeC,YAlBZ,qDAJR,IAACH,IAIO,qBAAH,sDAuBvC,OACE,eAAC,IAAMhD,SAAP,WACE,cAAC,IAAD,CAAOoD,UAAU,WAAjB,SACE,cAAC,IAAMC,OAAP,CACEC,YAAY,mBACZC,YAAY,QACZC,KAAK,QACLC,SAAUjB,EACVkB,MAAO,CAACC,MAAO,SAGnB,cAAC,IAAD,CAAOC,WAAYtB,EAAiBuB,QAASA,EAASC,YAAY,IAVpE,OA2BJ,IAAMD,EAAU,CACd,CACEE,MAAO,eACPC,UAAW,cACX7D,IAAK,cACL8D,OAAQ,SAACxB,GAAD,OAAiB,+BAAOA,EAAMyB,qBAExC,CACEH,MAAO,SACPC,UAAW,SACX7D,IAAK,SACL8D,OAAQ,SAACxB,GACP,OAAQA,GACN,KAAKpC,EAAkBa,WACrB,OAAO,cAACiD,EAAA,EAAD,CAAuBT,MAAO,CAAEU,SAAU,MACnD,KAAK/D,EAAkBe,eACrB,OACE,cAACiD,EAAA,EAAD,CACEC,aAAa,UACbZ,MAAO,CAAEU,SAAU,MAGzB,KAAK/D,EAAkBc,cACrB,OACE,cAACoD,EAAA,EAAD,CACED,aAAa,UACbZ,MAAO,CAAEU,SAAU,SAM/B,CACEL,MAAO,mBACPC,UAAW,SACX7D,IAAK,SACL8D,OAAQ,SAACxB,EAAe+B,EAAqBC,GAC3C,OACE,eAAC,IAAMzE,SAAP,WACE,mBACE0E,OAAO,SACPC,IAAI,aACJC,KAAI,gDAA2CnC,GAHjD,SAKGA,IAEH,cAAC,IAAD,UACE,cAAC,IAASoC,MAAV,CAAgBC,OAAO,sBAAvB,WACKN,EAAIxD,SACL,cAAC,IAAD,CACE+D,UAAU,SACVC,UAAW,EACXC,IAAKT,EAAIxD,WALkC,mBAwBvDkC,EAAY,SAACa,EAAemB,GAChCC,IAAaC,MAAM,CACjBC,QAAStB,EACTmB,iBCpISI,G,OAAa,CACxBC,KAAM,MACNC,OAAQ,MACR/D,gBAAiB,GACjBgE,cAAe,KAGJC,EAA6B,CACxCC,QAAS,EACTC,SAAU,GACVC,OAAQ,CACN,CACEN,KAAM,iBACNC,OAAQ,MACR/D,gBAAiB,6CACjBgE,cAAe,IAEjB,CACEF,KAAM,aACNC,OAAQ,OACR/D,gBAAiB,6CACjBgE,cAAe,GAEjB,CACEF,KAAM,WACNC,OAAQ,OACR/D,gBAAiB,6CACjBgE,cAAe,GAEjB,CACEF,KAAM,WACNC,OAAQ,MACR/D,gBAAiB,6CACjBgE,cAAe,IAEjB,CACEF,KAAM,cACNC,OAAQ,OACR/D,gBAAiB,6CACjBgE,cAAe,GAEjB,CACEF,KAAM,cACNC,OAAQ,OACR/D,gBAAiB,6CACjBgE,cAAe,IAEjB,CACEF,KAAM,QACNC,OAAQ,OACR/D,gBAAiB,6CACjBgE,cAAe,IAEjB,CACEF,KAAM,OACNC,OAAQ,OACR/D,gBAAiB,6CACjBgE,cAAe,K,0BClEN,SAASK,EAAQ3D,GAAe,IAAD,EACNC,IAAMC,SAAuB,IADvB,mBACrC0D,EADqC,KACxBC,EADwB,KAGtCC,EAAa,uCAAG,kCAAAvD,EAAA,6DACdmD,EADc,CACJK,GADI,mBACS/D,EAAM0D,SAC7BM,EAAuBN,EAAOO,KAAI,SAACC,GACvC,OAAIA,IAAUH,EACL/D,EAAMU,cAAcvB,WAAWa,EAAMd,SAErCc,EAAMU,cAAcyD,gBACzBnE,EAAMd,QACNgF,EAAM5E,oBARQ,SAaG8E,QAAQC,IAAIL,GAbf,OAadM,EAbc,OAcdC,EAAOD,EAASL,KAAI,SAAC7E,EAASoF,GAClC,IAAMN,EAAQR,EAAOc,GACrB,MAAO,CACLxG,IAAKkG,EAAMd,KACXA,KAAMc,EAAMd,KACZhE,QAASA,EACNqF,UAAU,IAAIpF,IAAU,IAAIqF,IAAIR,EAAMZ,gBACtCqB,SAAST,EAAMZ,cAFT,2BAGFsB,GAHE,IAILC,OAAO,IAAD,OAAMX,EAAMb,eAK1BQ,EAAeU,GA5BK,2CAAH,qDAoCnB,OANAtE,IAAM6E,WAAU,WACa,IAAvBlB,EAAYmB,QACdjB,OAKF,cAAC,IAAD,CAAMlC,MACJ,mBACEW,OAAO,SACPC,IAAI,aACJC,KAAI,qDAAgDzC,EAAMd,SAH5D,SAIEc,EAAMd,UACP8F,MACD,cAAC,IAAD,CACEC,QAAS,kBAAMjF,EAAMkF,wBADvB,oBAGA3D,MAAO,CAAEC,MAAO,KAVlB,SAWE,cAAC,IAAD,CAAOC,WAAYmC,EAAalC,QAASA,EAASC,YAAY,MAmBpE,IAAMD,EAAU,CACd,CACEE,MAAO,QACPC,UAAW,OACX7D,IAAK,QAEP,CACE4D,MAAO,UACPC,UAAW,UACX7D,IAAK,UACLmH,MAAO,QACPrD,OAAQ,SAACxB,GAAD,OACN,sBAAMiB,MAAO,CACX6D,WAAY,2FADd,SAGG9E,OAMHsE,EAAmC,CACvCS,OAAQ,GACRC,iBAAkB,IAClBC,eAAgB,IAChBC,UAAW,EACXC,mBAAoB,EACpBC,uBAAwB,IACxBC,kBAAmB,EACnBd,OAAQ,IClGK,SAASe,EAAS5F,GAAe,IAAD,EACHC,IAAMC,SAAiB,IADpB,mBACtC2F,EADsC,KACvBC,EADuB,KAc7C,OACE,eAAC,IAAMjI,SAAP,WACE,8BACE,cAAC,IAAD,CAAOoD,UAAU,WAAjB,SACE,cAAC,IAAMC,OAAP,CACEK,MAAO,CAAEC,MAAO,KAChBL,YAAY,4BACZC,YAAY,MACZC,KAAK,QACLC,SApBe,SAAChB,GACxB,IACEN,EAAM+F,wBAAwBzF,GAC9B,MAAO0F,GACPjF,EAAU,mCAAqCiF,EAAYhF,oBAoB3D,qBAAKO,MAAO,CAAE0E,UAAW,SAAzB,SACE,cAAC,IAAD,CAAOhF,UAAU,WAAjB,SACE,cAAC,IAAD,CACEE,YAAY,iBACZkE,OAAQ,cAACa,EAAA,EAAD,IACR7E,KAAK,QACLtD,SAtBwD,SAACoI,GACjEL,EAAiBK,EAAE5D,OAAOjC,cAyBvBN,EAAMyD,SAAS2C,QAAO,SAAC3C,EAAUvE,GAChC,OAAKA,EAAQmH,SAASR,IAGtBpC,EAAS6C,KACP,cAAC,IAAD,UACE,cAAC3C,EAAD,CAEEjD,cAAeV,EAAMU,cACrBwE,qBAAsB,kBACpBlF,EAAMuG,4BAA4BrH,IAEpCA,QAASA,EACTwE,OAAQ1D,EAAM0D,QANTxE,MAUJuE,GAfEA,IAgBR,OAcT,IAAM1C,EAAY,SAACa,EAAemB,GAChCC,IAAaC,MAAM,CACjBC,QAAStB,EACTmB,iBCrEW,SAASyD,IAAO,IAAD,EACIC,0BAA0B,YAD9B,mBACrBC,EADqB,KACXC,EADW,KAG5B,IAAKD,EAEH,OADAC,EAAYpD,GACL,cAAC,IAAM1F,SAAP,IAGT,IAAM6C,EAAgB,IAAIvC,EAAc,iCAsBxC,OACE,qBAAKyI,UAAU,MAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAACzJ,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOwJ,KAAK,WAAWC,QAAS,cAAClB,EAAD,CAC9BlF,cAAeA,EACfqF,wBA1BmB,SAAC7G,GAC5B,IAAKwB,EAAcqG,eAAe7H,GAChC,MAAM,IAAI8H,MAAM,mBAElB,IAA4C,IAAxCN,EAASjD,SAASwD,QAAQ/H,GAC5B,MAAM,IAAI8H,MAAM,yBAElBL,EAAY,2BACPD,GADM,IAETjD,SAAS,GAAD,mBAAMiD,EAAUjD,UAAhB,CAA0BvE,QAkB5BqH,4BAdwB,SAACrH,GACjCyH,EAAY,2BACPD,GADM,IAETjD,SAAUiD,EAAUjD,SAASyD,QAAO,SAAC5G,GAAD,OAAWA,IAAUpB,SAYnDuE,SAAUiD,EAASjD,SACnBC,OAAQgD,EAAShD,WAEnB,cAAC,IAAD,CAAOmD,KAAK,cAAcC,QAAS,cAAC/G,EAAD,CAAaW,cAAeA,aCjDzE,IAYeyG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCFdQ,IAAS9F,OACP,cAAC,IAAM+F,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.295dff68.chunk.js","sourcesContent":["import React from 'react';\nimport { Tabs } from 'antd';\nimport { Outlet, useLocation, useNavigate } from 'react-router-dom';\n\nconst { TabPane } = Tabs;\n\nexport default function Layout() {\n    const location = useLocation();\n    const navigate = useNavigate();\n\n    const handleTabChange = (key: string) => {\n        switch (key){\n            case 'accounts':\n                navigate('/accounts');\n                break;\n            case 'transaction':\n                navigate('/transaction');\n                break;\n            case 'settings':\n                navigate('/settings');\n                break;\n        }\n    }\n\n    const activatedKey = location.pathname.slice(1);\n\n    return (\n        <React.Fragment>\n            <Tabs defaultActiveKey={activatedKey} onChange={handleTabChange}>\n                <TabPane tab=\"Accounts Balances\" key=\"accounts\"> </TabPane>\n                <TabPane tab=\"Query Transaction Status\" key=\"transaction\"> </TabPane>\n                {/* <TabPane tab=\"Settings\" key=\"settings\" ></TabPane> */}\n            </Tabs>\n            <Outlet />\n        </React.Fragment>\n    );\n}\n","import crc20abi from '../contractABI/crc20.json';\nimport BigNumber from 'bignumber.js';\nimport Web3 from 'web3';\nimport { TransactionReceipt } from 'web3-eth';\nexport type { TransactionReceipt } from 'web3-eth';\n\nexport enum TransactionStatus {\n    NotOnChain = 'Not on Chain',\n    SuccessOnChain = 'Success on chain',\n    FailedOnChain = 'Failed on chain',\n}\n\nexport default class CronosService {\n    private web3: Web3;\n\n    public constructor(private url: string) {\n        this.web3 = new Web3(new Web3.providers.HttpProvider(url));\n    }\n\n    public async getTransactionRecord(txHash: string): Promise<TransactionRecord> {\n        const receipt = await this.web3.eth.getTransactionReceipt(txHash)\n\n        if (receipt === null) {\n            return {\n                status: TransactionStatus.NotOnChain,\n            }\n        }\n\n        if (!receipt.status) {\n            return {\n                status: TransactionStatus.FailedOnChain,\n                receipt: receipt,\n            }\n        }\n\n        return {\n            status: TransactionStatus.SuccessOnChain,\n            receipt: receipt,\n        }\n    }\n\n    public async getBalance(account: string): Promise<BigNumber> {\n        const balance = await this.web3.eth.getBalance(account);\n        return new BigNumber(balance);\n    }\n\n    public async getCRC20Balance(account: string, contractAddress: string): Promise<BigNumber> {\n        const contract = new this.web3.eth.Contract(crc20abi as any, contractAddress);\n        const balance = await contract.methods.balanceOf(account).call();\n        return new BigNumber(balance);\n    }\n\n    public isValidAddress(account: string): boolean {\n        return this.web3.utils.isAddress(account);\n    }\n}\n\nexport type TransactionRecord = {\n    status: TransactionStatus,\n    receipt?: TransactionReceipt,\n} & ({\n    status: TransactionStatus.NotOnChain\n} | {\n    status: TransactionStatus.SuccessOnChain\n    receipt: TransactionReceipt,\n} | {\n    status: TransactionStatus.FailedOnChain,\n    receipt: TransactionReceipt,\n})","import React from \"react\";\nimport { Collapse, Input, Space, Table, notification } from \"antd\";\nimport {\n  CheckCircleTwoTone,\n  CloseCircleTwoTone,\n  QuestionCircleTwoTone,\n} from \"@ant-design/icons\";\nimport ReactJson from \"react-json-view\";\nimport CronosService, {\n  TransactionStatus,\n  TransactionReceipt,\n} from \"./service/cronos\";\n\nexport default function Transaction(props: Props) {\n  const [transactionRows, setTransactionRecords] = React.useState<\n    TransactionRow[]\n  >([]);\n\n  const prependTransactionRecords = (record: TransactionRow) => {\n    setTransactionRecords([record, ...transactionRows]);\n  };\n\n  const handleSearch: AntdInputOnSearchFn = async (value) => {\n    if (value === \"\") {\n      return;\n    }\n    const requestedAt = new Date();\n    try {\n      const transactionRecord = await props.cronosService.getTransactionRecord(\n        value\n      );\n\n      prependTransactionRecords({\n        key: Date.now(),\n        txHash: value,\n        requestedAt,\n        status: transactionRecord.status,\n        receipt: transactionRecord.receipt,\n      });\n    } catch (err) {\n      openError(\"Get Transaction Error\", (err as Error).toString());\n      return;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Space direction=\"vertical\">\n        <Input.Search\n          placeholder=\"Transaction Hash\"\n          enterButton=\"Query\"\n          size=\"large\"\n          onSearch={handleSearch}\n          style={{width: 650}}\n        />\n      </Space>\n      <Table dataSource={transactionRows} columns={columns} pagination={false} />;\n    </React.Fragment>\n  );\n}\n\ntype Props = {\n  cronosService: CronosService;\n};\n\ntype TransactionRow = {\n  key: number;\n  requestedAt: Date;\n  txHash: string;\n  status: TransactionStatus;\n  receipt?: TransactionReceipt;\n};\n\nconst columns = [\n  {\n    title: \"Requested At\",\n    dataIndex: \"requestedAt\",\n    key: \"requestedAt\",\n    render: (value: Date) => <span>{value.toLocaleString()}</span>,\n  },\n  {\n    title: \"Status\",\n    dataIndex: \"status\",\n    key: \"status\",\n    render: (value: TransactionStatus) => {\n      switch (value) {\n        case TransactionStatus.NotOnChain:\n          return <QuestionCircleTwoTone style={{ fontSize: 22 }} />;\n        case TransactionStatus.SuccessOnChain:\n          return (\n            <CheckCircleTwoTone\n              twoToneColor=\"#52c41a\"\n              style={{ fontSize: 22 }}\n            />\n          );\n        case TransactionStatus.FailedOnChain:\n          return (\n            <CloseCircleTwoTone\n              twoToneColor=\"#eb2f96\"\n              style={{ fontSize: 22 }}\n            />\n          );\n      }\n    },\n  },\n  {\n    title: \"Transaction Hash\",\n    dataIndex: \"txHash\",\n    key: \"txHash\",\n    render: (value: string, row: TransactionRow, index: number) => {\n      return (\n        <React.Fragment>\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href={`https://cronos.crypto.org/explorer/tx/${value}`}\n          >\n            {value}\n          </a>\n          <Collapse>\n            <Collapse.Panel header=\"Transaction Receipt\" key=\"receipt\">\n              {!!row.receipt && (\n                <ReactJson\n                  iconStyle=\"square\"\n                  collapsed={1}\n                  src={row.receipt!}\n                />\n              )}\n            </Collapse.Panel>\n          </Collapse>\n        </React.Fragment>\n      );\n    },\n  },\n];\n\ntype AntdInputOnSearchFn = (\n  value: string,\n  event?:\n    | React.ChangeEvent<HTMLInputElement>\n    | React.MouseEvent<HTMLElement>\n    | React.KeyboardEvent<HTMLInputElement>\n) => void;\n\nconst openError = (title: string, description: string) => {\n  notification.error({\n    message: title,\n    description,\n  });\n};\n","export type Settings = {\n  version: 1;\n  accounts: string[];\n  tokens: Token[];\n};\n\nexport type Token = TokenV1;\n\nexport type TokenV1 = {\n  name: string;\n  symbol: string;\n  contractAddress: string;\n  decimalPlaces: number;\n};\n\nexport const CRO: Token = {\n  name: \"CRO\",\n  symbol: \"CRO\",\n  contractAddress: \"\",\n  decimalPlaces: 18,\n};\n\nexport const DEFAULT_SETTINGS: Settings = {\n  version: 1,\n  accounts: [],\n  tokens: [\n    {\n      name: \"Dai Stablecoin\",\n      symbol: \"DAI\",\n      contractAddress: \"0xf2001b145b43032aaf5ee2884e456ccd805f677d\",\n      decimalPlaces: 18,\n    },\n    {\n      name: \"Tether USD\",\n      symbol: \"USDT\",\n      contractAddress: \"0x66e428c3f67a68878562e79A0234c1F83c208770\",\n      decimalPlaces: 6,\n    },\n    {\n      name: \"USD Coin\",\n      symbol: \"USDC\",\n      contractAddress: \"0xc21223249CA28397B4B6541dfFaEcC539BfF0c59\",\n      decimalPlaces: 6,\n    },\n    {\n      name: \"VVSToken\",\n      symbol: \"VVS\",\n      contractAddress: \"0x2D03bECE6747ADC00E1a131BBA1469C15fD11e03\",\n      decimalPlaces: 18,\n    },\n    {\n      name: \"Wrapped BTC\",\n      symbol: \"WBTC\",\n      contractAddress: \"0x062E66477Faf219F25D27dCED647BF57C3107d52\",\n      decimalPlaces: 8,\n    },\n    {\n      name: \"Wrapped ETH\",\n      symbol: \"WETH\",\n      contractAddress: \"0xe44Fd7fCb2b1581822D0c862B68222998a0c299a\",\n      decimalPlaces: 18,\n    },\n    {\n      name: \"Shiba\",\n      symbol: \"SHIB\",\n      contractAddress: \"0xbED48612BC69fA1CaB67052b42a95FB30C1bcFee\",\n      decimalPlaces: 18,\n    },\n    {\n      name: \"Doge\",\n      symbol: \"DOGE\",\n      contractAddress: \"0x1a8E39ae59e5556B56b76fCBA98d22c9ae557396\",\n      decimalPlaces: 8,\n    },\n  ],\n};\n","import React from \"react\";\nimport { Button, Card, Table } from \"antd\";\nimport CronosService from \"./service/cronos\";\nimport { CRO as CROToken, Token } from \"./settings\";\nimport BigNumber from \"bignumber.js\";\n\nexport default function Account(props: Props) {\n  const [balanceRows, setBalanceRows] = React.useState<BalanceRow[]>([]);\n\n  const fetchBalances = async () => {\n    const tokens = [CROToken, ...props.tokens];\n    const tokenBalancePromises = tokens.map((token) => {\n      if (token === CROToken) {\n        return props.cronosService.getBalance(props.account);\n      } else {\n        return props.cronosService.getCRC20Balance(\n          props.account,\n          token.contractAddress\n        );\n      }\n    });\n\n    const balances = await Promise.all(tokenBalancePromises);\n    const rows = balances.map((balance, i) => {\n      const token = tokens[i];\n      return {\n        key: token.name,\n        name: token.name,\n        balance: balance\n          .dividedBy(new BigNumber(10).pow(token.decimalPlaces))\n          .toFormat(token.decimalPlaces, {\n            ...currencyFormat,\n            suffix: ` ${token.symbol}`,\n          }),\n      };\n    });\n\n    setBalanceRows(rows);\n  };\n  React.useEffect(() => {\n    if (balanceRows.length === 0) {\n      fetchBalances();\n    }\n  });\n\n  return (\n    <Card title={(\n      <a\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        href={`https://cronos.crypto.org/explorer/address/${props.account}`}\n      >{props.account}</a>\n    )} extra={(\n      <Button\n        onClick={() => props.onRemoveFromWishList()}\n      >Remove</Button>)\n    } style={{ width: 600 }}>\n      <Table dataSource={balanceRows} columns={columns} pagination={false} />\n    </Card>\n  )\n}\n\ntype Props = {\n  cronosService: CronosService;\n  onRemoveFromWishList: () => void;\n\n  account: string;\n  tokens: Token[];\n};\n\ntype BalanceRow = {\n  key: string;\n  name: string;\n  balance: string;\n};\n\nconst columns = [\n  {\n    title: \"Token\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"Balance\",\n    dataIndex: \"balance\",\n    key: \"balance\",\n    align: \"right\" as const,\n    render: (value: string) => (\n      <span style={{\n        fontFamily: 'Nunito,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol'\n      }}>\n        {value}\n      </span>\n    )\n  },\n];\n\nconst currencyFormat: BigNumber.Format = {\n  prefix: '',\n  decimalSeparator: '.',\n  groupSeparator: ',',\n  groupSize: 3,\n  secondaryGroupSize: 0,\n  fractionGroupSeparator: ' ',\n  fractionGroupSize: 0,\n  suffix: ''\n}","import React, { ChangeEventHandler } from \"react\";\nimport { Input, notification, Space } from \"antd\";\nimport { UserOutlined } from \"@ant-design/icons\";\nimport Account from \"./Account\";\nimport CronosService from \"./service/cronos\";\nimport { Token } from \"./settings\";\n\nexport default function Accounts(props: Props) {\n  const [accountFilter, setAccountFilter] = React.useState<string>(\"\");\n\n  const handleAddAccount = (value: string) => {\n    try {\n      props.onAddAccountToWatchList(value);\n    } catch (err) {\n      openError(\"Cannot Add Account to Watch List\", (err as any).toString());\n    }\n  };\n\n  const handleFilterAccount: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setAccountFilter(e.target.value);\n  };\n  return (\n    <React.Fragment>\n      <div>\n        <Space direction=\"vertical\">\n          <Input.Search\n            style={{ width: 500 }}\n            placeholder=\"Add Account to Watch List\"\n            enterButton=\"Add\"\n            size=\"large\"\n            onSearch={handleAddAccount}\n          />\n        </Space>\n      </div>\n      <div style={{ textAlign: \"right\" }}>\n        <Space direction=\"vertical\">\n          <Input\n            placeholder=\"Filter Account\"\n            prefix={<UserOutlined />}\n            size=\"large\"\n            onChange={handleFilterAccount}\n          />\n        </Space>\n      </div>\n      {props.accounts.reduce((accounts, account) => {\n        if (!account.includes(accountFilter)) {\n          return accounts;\n        }\n        accounts.push(\n          <Space>\n            <Account\n              key={account}\n              cronosService={props.cronosService}\n              onRemoveFromWishList={() =>\n                props.onRemoveAccountFromWishList(account)\n              }\n              account={account}\n              tokens={props.tokens}\n            />\n          </Space>\n        );\n        return accounts;\n      }, [] as any[])}\n    </React.Fragment>\n  );\n}\n\ntype Props = {\n  cronosService: CronosService;\n  onAddAccountToWatchList: (account: string) => void;\n  onRemoveAccountFromWishList: (account: string) => void;\n\n  accounts: string[];\n  tokens: Token[];\n};\n\nconst openError = (title: string, description: string) => {\n  notification.error({\n    message: title,\n    description,\n  });\n};\n","import React from 'react';\nimport { Routes, Route } from \"react-router-dom\";\nimport { useLocalStorage } from '@rehooks/local-storage';\nimport Layout from './Layout';\nimport Transaction from './Transaction';\nimport './App.css';\nimport CronosService from './service/cronos';\nimport { DEFAULT_SETTINGS, Settings } from './settings';\nimport Accounts from './Accounts';\n\nexport default function App() {\n  const [settings, setSettings] = useLocalStorage<Settings>('settings');\n\n  if (!settings) {\n    setSettings(DEFAULT_SETTINGS);\n    return <React.Fragment />;\n  }\n\n  const cronosService = new CronosService('https://evm-cronos.crypto.org');\n\n  const addAccountToWishList = (account: string) => {\n    if (!cronosService.isValidAddress(account)) {\n      throw new Error('invalid address');\n    }\n    if (settings.accounts.indexOf(account) !== -1) {\n      throw new Error('account already added');\n    }\n    setSettings({\n      ...settings,\n      accounts: [...settings!.accounts, account],\n    })\n  }\n\n  const removeAccountFromWishList = (account: string) => {\n    setSettings({\n      ...settings,\n      accounts: settings!.accounts.filter((value) => value !== account),\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route path=\"accounts\" element={<Accounts\n            cronosService={cronosService}\n            onAddAccountToWatchList={addAccountToWishList}\n            onRemoveAccountFromWishList={removeAccountFromWishList}\n            accounts={settings.accounts}\n            tokens={settings.tokens}\n          />} />\n          <Route path=\"transaction\" element={<Transaction cronosService={cronosService} />} />\n          {/* <Route path=\"settings\" element={<Transaction cronosService={cronosService} />} /> */}\n        </Route>\n      </Routes>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}